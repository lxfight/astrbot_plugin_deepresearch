# output_format/formatters.py
"""具体的输出格式化器实现"""

import markdown
from typing import Any, Dict, Optional
from astrbot.api.star import Star
from astrbot.api import logger

from .base import BaseOutputFormatter

# HTML 报告模板
HTML_REPORT_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Deep Research Report</title>
<style>
  body {{
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
    line-height: 1.6;
    color: #333;
    background-color: #f9f9f9;
    padding: 20px;
    max-width: 900px;
    margin: 20px auto;
    border: 1px solid #eee;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    border-radius: 8px;
  }}
  h1, h2, h3 {{ color: #0056b3; border-bottom: 1px solid #eee; padding-bottom: 5px;}}
  h1 {{ text-align: center; }}
  a {{ color: #007bff; text-decoration: none; }}
  a:hover {{ text-decoration: underline; }}
  pre {{ background-color: #eee; padding: 10px; border-radius: 4px; overflow-x: auto; }}
  code {{ background-color: #eee; padding: 2px 4px; border-radius: 3px; font-size: 0.9em;}}
  blockquote {{ border-left: 4px solid #ccc; padding-left: 15px; margin-left: 0; color: #555; font-style: italic;}}
   img {{ max-width: 100%; height: auto; }}
   ul, ol {{ padding-left: 25px; }}
   li {{ margin-bottom: 8px;}}
  .footer {{ margin-top: 30px; font-size: 0.8em; color: #777; text-align: center; border-top: 1px solid #eee; padding-top: 10px;}}
</style>
</head>
<body>
  <h1>深度研究报告</h1>
  {content}
  <div class="footer">Generated by AstrBot DeepResearch Plugin</div>
</body>
</html>
"""


class ImageFormatter(BaseOutputFormatter):
    """图片格式化器 - 将Markdown渲染为图片"""

    @property
    def format_name(self) -> str:
        return "image"

    @property
    def description(self) -> str:
        return "将Markdown报告渲染为图片"

    @property
    def file_extension(self) -> str:
        return ".png"

    async def format_report(
        self, markdown_content: str, star_instance: Star = None
    ) -> Optional[str]:
        """将Markdown内容渲染为图片URL"""
        if not self.validate_content(markdown_content):
            logger.warning("[ImageFormatter] Markdown内容为空")
            return None

        if not star_instance:
            logger.error("[ImageFormatter] 需要Star实例来调用html_render")
            return None

        try:
            # 1. Markdown 转 HTML
            html_body = markdown.markdown(
                markdown_content, extensions=["extra", "codehilite", "tables", "toc"]
            )

            # 2. 填充模板
            full_html = HTML_REPORT_TEMPLATE.format(content=html_body)

            # 3. 使用 AstrBot 的 html_render 渲染图片
            image_url = await star_instance.html_render(full_html, {}, return_url=True)

            if image_url:
                logger.info("[ImageFormatter] 图片报告渲染成功")
                return image_url
            else:
                logger.warning("[ImageFormatter] 图片渲染失败，未返回URL")
                return None

        except Exception as e:
            logger.error(f"[ImageFormatter] 渲染图片时发生错误: {e}", exc_info=True)
            return None


class HTMLFormatter(BaseOutputFormatter):
    """HTML格式化器 - 将Markdown转换为HTML"""

    @property
    def format_name(self) -> str:
        return "html"

    @property
    def description(self) -> str:
        return "HTML格式报告"

    @property
    def file_extension(self) -> str:
        return ".html"

    async def format_report(
        self, markdown_content: str, star_instance: Star = None, is_html_content: bool = False
    ) -> Optional[str]:
        """将Markdown内容转换为完整的HTML，或处理已有的HTML内容"""
        if not self.validate_content(markdown_content):
            logger.warning("[HTMLFormatter] 内容为空")
            return None

        try:
            if is_html_content:
                # 如果内容已经是HTML格式，直接使用模板包装
                logger.info("[HTMLFormatter] 处理已有的HTML内容")
                full_html = HTML_REPORT_TEMPLATE.format(content=markdown_content)
            else:
                # 如果是Markdown格式，先转换为HTML
                logger.info("[HTMLFormatter] 将Markdown转换为HTML")
                html_body = markdown.markdown(
                    markdown_content, extensions=["extra", "codehilite", "tables", "toc"]
                )
                full_html = HTML_REPORT_TEMPLATE.format(content=html_body)

            logger.info("[HTMLFormatter] HTML报告生成成功")
            return full_html

        except Exception as e:
            logger.error(f"[HTMLFormatter] 处理HTML时发生错误: {e}", exc_info=True)
            return None
